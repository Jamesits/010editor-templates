//------------------------------------------------
//--- 010 Editor v13.0 Binary Template
//
//      File: EFI Variables Dump.bt
//   Authors: James Swineson
//   Version: 1.0
//   Purpose: Used for files generated by `dmpstore -all -s xxx.bin` under EDK II's EFI shell
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// edk2/MdePkg/Include/Uefi/UefiMultiPhase.h
typedef union {
    uint32 Attributes <format=binary>;

    struct {
        BitfieldDisablePadding();
        char EFI_VARIABLE_NON_VOLATILE: 1;
        char EFI_VARIABLE_BOOTSERVICE_ACCESS: 1;
        char EFI_VARIABLE_RUNTIME_ACCESS: 1;
        char EFI_VARIABLE_HARDWARE_ERROR_RECORD: 1;
        char EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS: 1; // deprecated
        char EFI_VARIABLE_APPEND_WRITE: 1;
        char EFI_VARIABLE_AUTHENTICATED_WRITE_ACCESS: 1;
        char EFI_VARIABLE_ENHANCED_AUTHENTICATED_ACCESS: 1;
        BitfieldEnablePadding();
    } Flags <hidden=true>;
} ATTRIBUTES <read=AttributesToString>;

// edk2/ShellPkg/Library/UefiShellDebug1CommandsLib/DmpStore.c:GetAttrType()
string AttributesToString(ATTRIBUTES &a) {
    local string ret = "";
    if (a.Flags.EFI_VARIABLE_NON_VOLATILE) ret += "+NV";

    if (a.Flags.EFI_VARIABLE_RUNTIME_ACCESS) ret += "+RT+BS";
    else if (a.Flags.EFI_VARIABLE_BOOTSERVICE_ACCESS) ret += "+BS";

    if (a.Flags.EFI_VARIABLE_HARDWARE_ERROR_RECORD) ret += "+HR";
    if (a.Flags.EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS) ret += "+AT";
    if (a.Flags.EFI_VARIABLE_APPEND_WRITE) ret += "+AP";
    if (a.Flags.EFI_VARIABLE_AUTHENTICATED_WRITE_ACCESS) ret += "+AW";
    if (a.Flags.EFI_VARIABLE_ENHANCED_AUTHENTICATED_ACCESS) ret += "+EAA";

    ret = StrDel(ret, 0, 1);
    return ret;
}

// edk2/ShellPkg/Library/UefiShellDebug1CommandsLib/DmpStore.c:AppendSingleVariableToFile()
typedef struct {
  uint32     NameSize;
  uint32     DataSize;
  wchar_t    Name[NameSize / 2] <name="Name">;
  GUID       Guid <name="GUID">;
  ATTRIBUTES Attributes <name="Attributes">;
  char       Data[DataSize] <name="Data">;
  uint32     CRC32 <name="CRC32", format=hex>;
} DMPSTORE_VARIABLE;

int SizeOfVariable(DMPSTORE_VARIABLE &v) {
    return v.NameSize + v.DataSize + 32;
}

local int offset = 0;
while(1) {
    DMPSTORE_VARIABLE variable <optimize=false, read=(GUIDToString(this.Guid) + ":" + this.Name)>;
    offset += sizeof(variable);
    if (FSeek(offset) || FEof()) break;
}
